{"version":3,"sources":["components/GroceryListForm.jsx","components/GroceryListItem.jsx","components/GroceryList.jsx","components/GroceryApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["GroceryListForm","addItem","useState","newItem","value","setValue","handleAddClick","e","preventDefault","className","maxLength","placeholder","type","onChange","event","target","onKeyPress","keyCode","onClick","GroceryListItem","id","name","quantity","removeItem","updateQuantity","disabled","GroceryList","items","totalItems","reduce","total","item","map","index","GroceryApp","setItems","completed","newItems","concat","filter","newQuantity","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4329bb64.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../GroceryListForm.css\";\n\nfunction GroceryListForm({ addItem }) {\n  //state for inputvalue that is a new grocery item\n  const [value, setValue] = useState({ newItem: \"\" });\n  // update state based on input change\n  function handleChange(event) {\n    setValue({ newItem: event.target.value });\n  }\n  //gets the current value from state\n  function handleAddClick(e) {\n    addItem(value);\n    setValue({ newItem: \"\" });\n    e.preventDefault();\n  }\n\n  function handleKeypress(e) {\n    if (e.keyCode === 13) {\n      handleAddClick();\n    }\n  }\n\n  return (\n    <form className=\"GroceryListForm\">\n      <input\n        maxLength=\"15\"\n        placeholder=\"New item...\"\n        type=\"text\"\n        onChange={handleChange}\n        value={value.newItem}\n        onKeyPress={handleKeypress}\n      ></input>\n      <button onClick={handleAddClick}>Add</button>\n    </form>\n  );\n}\n\nexport default GroceryListForm;\n","import React from \"react\";\nimport \"../GroceryListItem.css\";\n\nfunction GroceryListItem({ id, name, quantity, removeItem, updateQuantity }) {\n  function remove() {\n    removeItem(id);\n  }\n\n  function add() {\n    const newQuantity = quantity + 1;\n    updateQuantity(id, newQuantity);\n  }\n\n  function subtract() {\n    const newQuantity = quantity - 1;\n    updateQuantity(id, newQuantity);\n  }\n\n  return (\n    <div className=\"GroceryListItem\">\n      <li>\n        {name}\n        <div className=\"GroceryListItem-change\">\n          <button\n            className=\"GroceryListItem-qty-btn\"\n            onClick={subtract}\n            disabled={quantity < 2}\n          >\n            -\n          </button>\n          {quantity}\n          <button className=\"GroceryListItem-qty-btn\" onClick={add}>\n            +\n          </button>\n          <button className=\"GroceryListItem-rm-btn\" onClick={remove}>\n            x\n          </button>\n        </div>\n      </li>\n    </div>\n  );\n}\n\nexport default GroceryListItem;\n","import React from \"react\";\nimport GroceryListItem from \"./GroceryListItem\";\nimport \"../GroceryList.css\";\n\nfunction GroceryList({ items, removeItem, updateQuantity }) {\n  // calculate total items in grocery list\n  const totalItems = items.reduce((total, item) => total + item.quantity, 0);\n\n  return (\n    <div className=\"GroceryList\">\n      {items.map((item, index) => {\n        return (\n          <GroceryListItem\n            key={index}\n            name={item.name}\n            removeItem={removeItem}\n            quantity={item.quantity}\n            updateQuantity={updateQuantity}\n            {...item}\n          />\n        );\n      })}\n      <div className=\"GroceryList-total\">\n        <h2>Total: {totalItems}</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default GroceryList;\n","import React, { useState } from \"react\";\nimport GroceryListForm from \"./GroceryListForm\";\nimport GroceryList from \"./GroceryList\";\nimport \"../GroceryApp.css\";\n\nfunction GroceryApp() {\n  const initialItems = [];\n  const [items, setItems] = useState(initialItems);\n\n  function addItem(value) {\n    let newItem = {\n      name: value.newItem,\n      completed: false,\n      quantity: 1,\n    };\n    let newItems = items.concat(newItem);\n    newItems.map((item, index) => {\n      return (item.id = index);\n    });\n\n    setItems(newItems);\n  }\n\n  function removeItem(id) {\n    const newItems = items.filter((item) => {\n      return item.id !== id;\n    });\n    setItems(newItems);\n  }\n\n  function updateQuantity(id, newQuantity) {\n    const newItems = items.map((item) => {\n      if (item.id === id) {\n        return { ...item, quantity: newQuantity };\n      } else {\n        return item;\n      }\n    });\n    setItems(newItems);\n  }\n\n  return (\n    <div className=\"GroceryApp\">\n      <h2 className=\"GroceryApp-title\">Grocery List</h2>\n      <div className=\"GroceryApp-form\">\n        <GroceryListForm addItem={addItem} />\n      </div>\n      <div className=\"GroceryApp-list\">\n        <GroceryList\n          items={items}\n          removeItem={removeItem}\n          updateQuantity={updateQuantity}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default GroceryApp;\n\n/*\n- grocery app\n  - form\n  - list \n    - Item\n\n\n\neach item will have\n  id\n  \n  completed\n*/\n","import React from \"react\";\nimport GroceryApp from \"./components/GroceryApp\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <h1>React Grocery List App</h1>\n      <div className=\"App\">\n        <GroceryApp />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}