{"version":3,"sources":["components/GroceryListForm.jsx","components/GroceryListItem.jsx","components/GroceryList.jsx","components/GroceryApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["GroceryListForm","addItem","useState","value","setValue","handleAddClick","e","preventDefault","onSubmit","className","maxLength","placeholder","type","onChange","event","target","onKeyPress","keyCode","GroceryListItem","id","name","quantity","removeItem","updateQuantity","completed","checkItemDone","remove","handleCheck","onClick","disabled","GroceryList","items","totalItems","reduce","total","item","map","index","GroceryApp","setItems","newItems","filter","newQuantity","console","log","sort","a","b","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7e935ab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../GroceryListForm.css\";\n\nfunction GroceryListForm({ addItem }) {\n  //state for inputvalue that is a new grocery item\n  const [value, setValue] = useState(\"\");\n  // update state based on input change\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n  //gets the current value from state\n  function handleAddClick(e) {\n    if (value !== \"\") {\n      addItem(value);\n      setValue(\"\");\n    }\n\n    e.preventDefault();\n  }\n\n  function handleKeypress(e) {\n    if (e.keyCode === 13) {\n      handleAddClick();\n    }\n  }\n\n  return (\n    <form onSubmit={handleAddClick} className=\"GroceryListForm\">\n      <input\n        maxLength=\"18\"\n        placeholder=\"New item...\"\n        type=\"text\"\n        onChange={handleChange}\n        value={value}\n        onKeyPress={handleKeypress}\n      ></input>\n      <button type=\"submit\">Add</button>\n    </form>\n  );\n}\n\nexport default GroceryListForm;\n","import React from \"react\";\nimport \"../GroceryListItem.css\";\n\nfunction GroceryListItem({\n  id,\n  name,\n  quantity,\n  removeItem,\n  updateQuantity,\n  completed,\n  checkItemDone,\n}) {\n  function remove() {\n    removeItem(id);\n  }\n\n  function add() {\n    const newQuantity = quantity + 1;\n    updateQuantity(id, newQuantity);\n  }\n\n  function subtract() {\n    const newQuantity = quantity - 1;\n    updateQuantity(id, newQuantity);\n  }\n\n  function handleCheck() {\n    checkItemDone(id);\n  }\n\n  return (\n    <div className=\"GroceryListItem\">\n      <li>\n        {completed ? (\n          <>\n            <span onClick={handleCheck} className=\"GroceryListItem-completed\">\n              {name}\n            </span>\n\n            <div className=\"GroceryListItem-change\">\n              <button className=\"GroceryListItem-qty-btn \" disabled>\n                -\n              </button>\n              {quantity}\n              <button className=\"GroceryListItem-qty-btn\" disabled>\n                +\n              </button>\n              <button className=\"GroceryListItem-rm-btn\" onClick={remove}>\n                x\n              </button>\n            </div>\n          </>\n        ) : (\n          <>\n            <span onClick={handleCheck}>{name}</span>\n            <div className=\"GroceryListItem-change\">\n              <button\n                className=\"GroceryListItem-qty-btn\"\n                onClick={subtract}\n                disabled={quantity < 2}\n              >\n                -\n              </button>\n              {quantity}\n              <button className=\"GroceryListItem-qty-btn\" onClick={add}>\n                +\n              </button>\n              <button className=\"GroceryListItem-rm-btn\" onClick={remove}>\n                x\n              </button>\n            </div>\n          </>\n        )}\n      </li>\n    </div>\n  );\n}\n\nexport default GroceryListItem;\n","import React from \"react\";\nimport GroceryListItem from \"./GroceryListItem\";\nimport \"../GroceryList.css\";\n\nfunction GroceryList({ items, removeItem, updateQuantity, checkItemDone }) {\n  // calculate total items in grocery list\n  const totalItems = items.reduce((total, item) => total + item.quantity, 0);\n\n  return (\n    <div className=\"GroceryList\">\n      {items.map((item, index) => {\n        return (\n          <GroceryListItem\n            key={index}\n            name={item.name}\n            completed={item.completed}\n            removeItem={removeItem}\n            quantity={item.quantity}\n            updateQuantity={updateQuantity}\n            checkItemDone={checkItemDone}\n            {...item}\n          />\n        );\n      })}\n      <div className=\"GroceryList-total\">\n        <h2>Total: {totalItems}</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default GroceryList;\n","import React, { useState } from \"react\";\nimport GroceryListForm from \"./GroceryListForm\";\nimport GroceryList from \"./GroceryList\";\nimport \"../GroceryApp.css\";\n\nfunction GroceryApp() {\n  const initialItems = [\n    { name: \"bananas\", completed: false, quantity: 3, id: 1 },\n    { name: \"chicken\", completed: false, quantity: 1, id: 2 },\n    { name: \"milk\", completed: true, quantity: 2, id: 3 },\n  ];\n  const [items, setItems] = useState(initialItems);\n\n  function addItem(value) {\n    let newItem = {\n      name: value,\n      completed: false,\n      quantity: 1,\n    };\n    let newItems = [newItem, ...items];\n    newItems.map((item, index) => {\n      return (item.id = index);\n    });\n\n    setItems(newItems);\n  }\n\n  function removeItem(id) {\n    const newItems = items.filter((item) => {\n      return item.id !== id;\n    });\n    setItems(newItems);\n  }\n\n  function updateQuantity(id, newQuantity) {\n    const newItems = items.map((item) => {\n      if (item.id === id) {\n        return { ...item, quantity: newQuantity };\n      } else {\n        return item;\n      }\n    });\n    setItems(newItems);\n  }\n  //funktion som tar de som är completed och flyttar längst ned i listan. Triggas när något bir completed\n  function checkItemDone(id) {\n    const newItems = items.map((item) => {\n      if (item.id === id) {\n        console.log(item.completed);\n        if (!item.completed) {\n          return { ...item, completed: true };\n        } else {\n          return { ...item, completed: false };\n        }\n      } else {\n        return item;\n      }\n    });\n    //loopa över alla items och lägg de som är completed sist\n    newItems.sort(function (a, b) {\n      return a.completed - b.completed;\n    });\n\n    setItems(newItems);\n  }\n\n  return (\n    <div className=\"GroceryApp\">\n      <h2 className=\"GroceryApp-title\">Grocery List</h2>\n      <div className=\"GroceryApp-form\">\n        <GroceryListForm addItem={addItem} />\n      </div>\n      <div className=\"GroceryApp-list\">\n        <GroceryList\n          items={items}\n          removeItem={removeItem}\n          updateQuantity={updateQuantity}\n          checkItemDone={checkItemDone}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default GroceryApp;\n\n/*\n- grocery app\n  - form\n  - list \n    - Item\n\n\n\neach item will have\n  id\n  \n  completed\n*/\n","import React from \"react\";\nimport GroceryApp from \"./components/GroceryApp\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <h1>React Grocery List App</h1>\n      <div className=\"App\">\n        <GroceryApp />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}